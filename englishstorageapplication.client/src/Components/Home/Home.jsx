import { useEffect } from "react";
import "../Home/Home.css";
import { Container, Row, Col, Button } from 'react-bootstrap';

function Home() {
    useEffect(() => {
        const observerCallback = (entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    if (entry.target.classList.contains('counter')) {
                        const end = parseInt(entry.target.dataset.value);
                        animateValue(entry.target, 0, end, 2000);
                    }
                    entry.target.classList.add('visible');
                }
            });
        };

        const animateValue = (element, start, end, duration) => {
            let startTimestamp = null;
            const step = (timestamp) => {
                if (!startTimestamp) startTimestamp = timestamp;
                const progress = Math.min((timestamp - startTimestamp) / duration, 1);
                const current = Math.floor(progress * (end - start) + start);
                element.textContent = current.toLocaleString();
                if (progress < 1) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        };

        const observer = new IntersectionObserver(observerCallback, {
            threshold: 0.1
        });

        document.querySelectorAll('.animate-on-scroll, .counter').forEach(el => observer.observe(el));
    }, []);

    return (
        <div className="minimal-home animate-on-scroll">
            <section className="hero">
                <Container>
                    <div className="hero-content" >
                        <h1>–ò–∑—É—á–∞–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º</h1>
                        <p className="subtitle">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Å–≤–æ–µ–Ω–∏—è —è–∑—ã–∫–∞</p>
                        <div className="cta-container">
                            <Button className="btn-primary">–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ</Button>
                            <Button variant="outline-dark">–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ</Button>
                        </div>
                    </div>
                </Container>
            </section>

            <section className="stats">
                <Container>
                    <Row className="stats-row">
                        <Col md={4} className="stat-column animate-on-scroll">
                            <div className="stat-card">
                                <div className="counter" data-value="10000">0</div>
                                <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</p>
                            </div>
                        </Col>
                        <Col md={4} className="stat-column animate-on-scroll">
                            <div className="stat-card">
                                <div className="counter" data-value="100">0</div>
                                <p>–£—Ä–æ–∫–æ–≤</p>
                            </div>
                        </Col>
                        <Col md={4} className="stat-column animate-on-scroll">
                            <div className="stat-card">
                                <div className="counter" data-value="98">0</div>
                                <p>% –£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</p>
                            </div>
                        </Col>
                    </Row>
                </Container>
            </section>

            <section className="features">
                <Container>
                    <h2 className="section-title animate-on-scroll">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è</h2>
                    <Row>
                        {[
                            {
                                icon: "üéØ",
                                title: "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
                                description: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É"
                            },
                            {
                                icon: "üí°",
                                title: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏",
                                description: "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –æ–±—É—á–µ–Ω–∏—é"
                            },
                            {
                                icon: "üó£Ô∏è",
                                title: "–†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
                                description: "–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞"
                            },
                            {
                                icon: "üì±",
                                title: "–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
                                description: "–û–±—É—á–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –∏ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ"
                            }
                        ].map((feature, index) => (
                            <Col md={6} lg={3} key={index} className="animate-on-scroll">
                                <div className="feature-card">
                                    <div className="feature-icon">{feature.icon}</div>
                                    <h3>{feature.title}</h3>
                                    <p>{feature.description}</p>
                                </div>
                            </Col>
                        ))}
                    </Row>
                </Container>
            </section>

            <section className="process">
                <Container>
                    <h2 className="section-title animate-on-scroll">–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ</h2>
                    <div className="process-steps">
                        {[
                            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —è–∑—ã–∫–∞",
                            "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞",
                            "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è",
                            "–ü—Ä–∞–∫—Ç–∏–∫–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ",
                            "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                        ].map((step, index) => (
                            <div key={index} className="process-step animate-on-scroll">
                                <div className="step-number">{index + 1}</div>
                                <p>{step}</p>
                            </div>
                        ))}
                    </div>
                </Container>
            </section>

            <section className="cta-section">
                <Container>
                    <div className="cta-content animate-on-scroll">
                        <h2>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</h2>
                        <p>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–µ–≥–æ–¥–Ω—è –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–≤–æ–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö —Ü–µ–ª–µ–π</p>
                        <Button className="btn-primary">–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ</Button>
                    </div>
                </Container>
            </section>

            
        </div>
    );
}

export default Home;